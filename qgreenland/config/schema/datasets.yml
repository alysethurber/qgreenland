list(include('dataset'))
---

dataset:
  id: str()
  # TODO: Enum access_method?
  assets: list(include('assets'))
  metadata: include('metadata')


---
assets:
  # Unique ID used for generating paths and uniquely identifiying an asset
  # within a dataset.
  id: str()
  http: include('http', required=False)
  # cmr: list(include('cmr', required=False), required=False)
  # ogr_remote_vector: include('ogr_remote_vector', required=False)
  ## TODO: do we like 'manual' as a name?
  # manual: include('manual', required=False)

---
metadata:
  title: str()
  abstract: str()
  citation:
    text: str()
    url: str()

---
http:
  urls: list(str())

# ---
# cmr:
#   granule_ur: str()
#   collection_concept_id: str()
# 
# ---
# ogr_remote_vector:
#   # TODO: Consider breaking up in to "featureserver_url", "feature_id", "query"?
#   query_url: str()

# ---
# manual:
#   access_instructions: str()
  
# ---
# source:
#   # Unique ID used for generating paths and uniquely identifiying a source
#   # within a dataset.
#   id: str()
# 
#   # TODO: Make the access-method-dependent params mutually-exclusive. Does
#   #       Yamale support this?
# 
#   ##### access_method: cmr #####
#   # A granule corresponds to n >= 1 files
#   granule_ur: str(required=False)
#   collection_concept_id: str(required=False)
# 
#   ##### access_method: http #####
#   # If a granule_ur and collection_concept_id isn't provided, provide a
#   # list of files instead
#   urls: list(str(), required=False)
#   # Override TLS certificate verification
#   verify: bool(required=False)
# 
#   ##### access_method: ogr_remote_vector #####
#   query_url: str(required=False)
# 
#   ##### access_method: manual #####
#   access_instructions: str(required=False)
# 
#   # TODO: Override default filename? By default, the filename from the URL is used
#   # base_filename: str(required=False)
# 
# 
